Metadata-Version: 2.2
Name: github_connector
Version: 0.1.53
Summary: Useful functions for interacting with GitHub repositories
Author: Duarte
Author-email: duarte.s.marques@closer.pt
Classifier: Programming Language :: Python :: 3
Description-Content-Type: text/markdown
Requires-Dist: PyGithub
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: requires-dist
Dynamic: summary

# GitHub Repository Utilities

Useful functions for interacting with GitHub repositories, whether in their
management or their content.

## Version

Current: `0.1.53`

## Files

### `auth.py`

**Functions:**

- **`authenticate`**
  Updates all class attributes if the login is valid.
  *Returns:* None
  *Depends on:* None

- **`close`**
  Resets all credentials (class attributes) to `None`.
  *Returns:* None
  *Depends on:* None

### `repo_management.py`

**Functions:**

- **`get_all_orgs`**
  Retrieves a list of all organizations the user is a member of
  (`self.user_session`).
  *Returns:* List of organizations names (None if not authenticated)
  *Depends on:* `authenticate` (the attribute `self.authenticated_obj` must be
  different from `None`)

  - **`get_all_branches`**
  Retrieves a list of all branches in the current repository
  (`self.current_repo`).
  *Returns:* List of branch names (None if not authenticated)
  *Depends on:* `authenticate` (the attribute `self.authenticated_obj` must be
  different from `None`)

  - **`get_all_repos`**
  Retrieves a list of all repositories in the current session (`self.org_session`
  or `self.user_session`).
  *Returns:* List of repository names (None if not authenticated)
  *Depends on:* `authenticate` (the attribute `self.authenticated_obj` must be
  different from `None`)

- **`repository_exists`**
  Checks if a user has access to the specified repository in the current session
  (`self.org_session` or `self.user_session`).
  *Returns:* True or False (None if not authenticated)
  *Depends on:* `authenticate` (the attribute `self.authenticated_obj` must be
  different from `None`)

- **`create_repository`**
  Creates a new repository and switches to it (updates the class attributes
  `current_repo` and `current_branch` with the new repository name and its main
  branch). Also commits a `README.md` file to initialize the repository.  
  *Returns:* None
  *Depends on:* `authenticate` (the attribute `self.authenticated_obj` must be
  different from `None`), `repository_exists` (to prevent overwriting an
  existing repository)

- **`switch_to_organization`**
  Switches to the specified org, if the user has access to it.
  (`self.user_session`). Also allows to switch to the user's personal
  account (sets `self.org_session` and `self.current_org` to `None`), as
  a default option.
  *Returns:* None
  *Depends on:* `authenticate` (the attribute `self.authenticated_obj` must be
  different from `None`)

- **`switch_to_repo`**
  Fetches an existing repository in the current session (`self.org_session` or
  `self.user_session`) and updates the class attributes `current_repo` and
  `current_branch` accordingly.
  *Returns:* None
  *Depends on:* `authenticate` (the attribute `self.authenticated_obj` must be
  different from `None`), `repository_exists` (ensures the repository exists
  before retrieval)

- **`switch_to_branch`**
  Switches to the specified branch, if it exists in the current repository
  (`self.current_repo`).
  *Returns:* None
  *Depends on:* `authenticate` (the attribute `self.authenticated_obj` must be
  different from `None`)

- **`clear_branch`**
  Clears the current branch (`self.current_branch`) in the current repository
  (`self.current_repo`) by removing all files.
  *Returns:* None
  *Depends on:* `authenticate` (the attribute `self.authenticated_obj` must be
  different from `None`)

- **`create_branches_from_main`**
  Creates a new branch (with a given name) from the main branch of the current
  repository, and switches to it (updates the class attribute `current_branch`).
  *Returns:* None
  *Depends on:* `authenticate` (the attribute `self.authenticated_obj` must be
  different from `None`)

- **`create_pull_request`**
  Creates a pull request from the current branch (`self.current_branch`) to
  another specified branch.
  *Returns:* None
  *Depends on:* `authenticate` (the attribute `self.authenticated_obj` must be
  different from `None`)

### `file_operations.py`

**Functions:**

- **`get_all_files`**
  Retrieves file paths and content from the current repository and branch
  (`self.current_repo`, `self.current_branch`) (by default only extracts the
  `.txt` files).
  *Returns:* List of dictionaries with file path and content (None if not
  authenticated)
  *Depends on:* `authenticate` (the attribute `self.authenticated_obj` must be
  different from `None`)

- **`upload_file`**
  Uploads or updates a single file in the repository in the current repository
  (`self.current_repo`) and branch (`self.current_branch`).
  *Returns:* None
  *Depends on:* `authenticate` (the attribute `self.authenticated_obj` must be
  different from `None`)

- **`copy_files_to_repo`**
  Copies files from the `current_repo` and `current_branch` to a new
  repository's main branch, while also switching to it (through `self.current_repo`
  and `self.current_branch`). The target repository must not already exist to
  avoid overwriting.
  *Returns:* None
  *Depends on:* `authenticate` (the attribute `self.authenticated_obj` must be
  different from `None`), `repository_exists` (prevents overwriting an existing
  repository), `get_all_files` (retrieves files to copy), `create_repository`
  (creates the new repository and updates class attributes: `current_repo` will
  be set to the new repository, and the branch will be `main`)
